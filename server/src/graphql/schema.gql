# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CreateProductInput {
  category: String!
  name: String!
  photo: String!
  price: String!
  stock: String!
  suppliers: String!
}

input CreateSupplierInput {
  address: String!
  amount: String!
  company: String!
  date: String
  name: String!
  status: String!
}

type Customer {
  address: String!
  country: String!
  email: String!
  id: Int!
  name: String!
  phone: String!
  photo: String
  registerDate: DateTime!
  spent: String!
}

type CustomerDetails {
  address: String!
  country: String!
  email: String!
  id: Int!
  name: String!
  phone: String!
  photo: String
  registerDate: DateTime!
  spent: String!
  transactions: [Transaction!]!
}

type CustomerEntry {
  address: String!
  email: String!
  id: ID!
  name: String!
  phone: String!
  photo: String
  register_date: String!
  spent: String!
}

input CustomerFiltersInput {
  address: String
  email: String
  name: String
  phone: String
  register_date: String
  spent: String
}

type DashboardData {
  recentCustomers: [Customer!]!
  stats: DashboardStats!
  transactions: [Transaction!]!
}

type DashboardStats {
  totalCustomers: Int!
  totalProducts: Int!
  totalSuppliers: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  createSupplier(input: CreateSupplierInput!): Supplier!
  deleteProduct(id: String!): Boolean!
  deleteSupplier(id: String!): Boolean!
  login(loginInput: LoginInput!): AuthResponse!
  logout: Boolean!
  refreshTokens: AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!
  updateProduct(id: String!, input: UpdateProductInput!): Product
  updateSupplier(id: String!, input: UpdateSupplierInput!): Supplier
}

type Order {
  address: String!
  id: Int!
  name: String!
  order_date: String!
  photo: String
  price: String!
  products: String!
  status: String!
}

type OrdersResponse {
  items: [Order!]!
  totalCount: Int!
}

type Product {
  category: String!
  id: ID!
  name: String!
  photo: String!
  price: String!
  stock: String!
  suppliers: String!
}

input ProductFilterInput {
  category: String
  maxPrice: String
  minPrice: String
  name: String
  suppliers: String
}

type ProductsResponse {
  categories: [String!]!
  products: [Product!]!
}

type Query {
  customerDetails(customerId: Int!): CustomerDetails
  dashboard: DashboardData!
  getCustomer(id: String!): CustomerEntry
  getCustomers(filters: CustomerFiltersInput): [CustomerEntry!]!
  getProduct(id: String!): Product
  getProducts(filters: ProductFilterInput): ProductsResponse!
  getSupplier(id: String!): Supplier
  getSuppliers(filters: SupplierFilterInput): [Supplier!]!
  me: User!
  orders: OrdersResponse!
}

input RegisterInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

type Supplier {
  address: String!
  amount: String!
  company: String!
  date: String!
  id: ID!
  name: String!
  status: String!
}

input SupplierFilterInput {
  company: String
  name: String
  status: String
}

type Transaction {
  amount: String!
  createdAt: DateTime
  customerId: Int
  email: String
  id: Int!
  name: String!
  type: String!
}

input UpdateProductInput {
  category: String
  name: String
  photo: String
  price: String
  stock: String
  suppliers: String
}

input UpdateSupplierInput {
  address: String
  amount: String
  company: String
  date: String
  name: String
  status: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: ID!
  lastName: String
  updatedAt: DateTime!
}
